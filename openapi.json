{
  "openapi": "3.1.0",
  "info": {
    "title": "SQL Server MCP API",
    "version": "1.0.0.5",
    "description": "API for interacting with the SQL Server Model Context Protocol (MCP) server.\nThis server allows tools like GitHub Copilot to connect to SQL Server databases.\nAll operations are performed via JSON-RPC 2.0 over HTTP POST.\n\nAuthentication is required using Bearer token scheme when API key is configured."
  },
  "servers": [
    {
      "url": "http://localhost:3001",
      "description": "MCP Server for SQL Server Database Operations"
    }
  ],
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "Bearer token",
        "description": "Bearer token authentication using Authorization header. API key must be provided with format: 'Bearer <your-api-key>'. Configure API key via MSSQL_MCP_API_KEY environment variable or ApiSecurity:ApiKey in appsettings.json. Authentication is optional if no API key is configured."
      }
    },
    "schemas": {
      "JsonRpcRequestBase": {
        "type": "object",
        "properties": {
          "jsonrpc": {
            "type": "string",
            "enum": ["2.0"],
            "description": "Specifies the version of the JSON-RPC protocol. MUST be \"2.0\"."
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "An identifier established by the Client that MUST contain a Number, String, or NULL value if included. If it is not included it is assumed to be a notification. The value SHOULD normally not be Null and Numbers SHOULD NOT contain fractional parts."
          },
          "method": {
            "type": "string",
            "description": "A String containing the name of the method to be invoked."
          }
        },
        "required": ["jsonrpc", "id", "method"]
      },
      "JsonRpcResponseBase": {
        "type": "object",
        "properties": {
          "jsonrpc": {
            "type": "string",
            "enum": ["2.0"]
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": ["jsonrpc", "id"]
      },
      "JsonRpcErrorObject": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "nullable": true
          }
        },
        "required": ["code", "message"]
      },
      "JsonRpcSuccessResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonRpcResponseBase"
          },
          {
            "type": "object",
            "properties": {
              "result": {
                "type": "object",
                "description": "The result of the JSON-RPC call."
              }
            },
            "required": ["result"]
          }
        ]
      },
      "JsonRpcErrorResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonRpcResponseBase"
          },
          {
            "type": "object",
            "properties": {
              "error": {
                "$ref": "#/components/schemas/JsonRpcErrorObject"
              }
            },
            "required": ["error"]
          }
        ]
      },
      "AddConnectionRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The unique name for the connection."
          },
          "connectionString": {
            "type": "string",
            "description": "The SQL Server connection string."
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Optional description for the connection."
          }
        },
        "required": ["name", "connectionString"]
      },
      "UpdateConnectionRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the connection to update."
          },
          "connectionString": {
            "type": "string",
            "nullable": true,
            "description": "The new connection string. If null, connection string is not changed."
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "The new description. If null, description is not changed."
          }
        },
        "required": ["name"]
      },
      "RemoveConnectionRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the connection to remove."
          }
        },
        "required": ["name"]
      },
      "TestConnectionRequest": {
        "type": "object",
        "properties": {
          "connectionString": {
            "type": "string",
            "description": "The connection string to test."
          }
        },
        "required": ["connectionString"]
      },
      "InitializeParams": {
        "type": "object",
        "properties": {
          "connectionName": {
            "type": "string",
            "default": "DefaultConnection",
            "description": "The name of the connection string to use."
          }
        }
      },
      "InitializeRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonRpcRequestBase"
          },
          {
            "type": "object",
            "properties": {
              "method": {
                "type": "string",
                "enum": ["Initialize"]
              },
              "params": {
                "$ref": "#/components/schemas/InitializeParams"
              }
            },
            "required": ["method"]
          }
        ],
        "description": "Initialize the SQL Server connection."
      },
      "ExecuteQueryParams": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "The SQL query to execute."
          },
          "connectionName": {
            "type": "string",
            "default": "DefaultConnection",
            "description": "The name of the connection string to use."
          }
        },
        "required": ["query"]
      },
      "ExecuteQueryRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonRpcRequestBase"
          },
          {
            "type": "object",
            "properties": {
              "method": {
                "type": "string",
                "enum": ["ExecuteQuery"]
              },
              "params": {
                "$ref": "#/components/schemas/ExecuteQueryParams"
              }
            },
            "required": ["method", "params"]
          }
        ],
        "description": "Executes a SQL query and returns the results as JSON."
      },
      "GetTableMetadataParams": {
        "type": "object",
        "properties": {
          "connectionName": {
            "type": "string",
            "default": "DefaultConnection",
            "description": "The name of the connection string to use."
          },
          "schema": {
            "type": "string",
            "nullable": true,
            "description": "Optional schema filter."
          }
        }
      },
      "GetTableMetadataRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonRpcRequestBase"
          },
          {
            "type": "object",
            "properties": {
              "method": {
                "type": "string",
                "enum": ["GetTableMetadata"]
              },
              "params": {
                "$ref": "#/components/schemas/GetTableMetadataParams"
              }
            },
            "required": ["method"]
          }
        ],
        "description": "Gets detailed metadata about the database tables, columns, primary keys and foreign keys."
      },
      "GetDatabaseObjectsMetadataParams": {
        "type": "object",
        "properties": {
          "connectionName": {
            "type": "string",
            "default": "DefaultConnection",
            "description": "The name of the connection string to use."
          },
          "schema": {
            "type": "string",
            "nullable": true,
            "description": "Optional schema filter."
          },
          "includeViews": {
            "type": "boolean",
            "default": true,
            "description": "Whether to include views in the results."
          }
        }
      },
      "GetDatabaseObjectsMetadataRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonRpcRequestBase"
          },
          {
            "type": "object",
            "properties": {
              "method": {
                "type": "string",
                "enum": ["GetDatabaseObjectsMetadata"]
              },
              "params": {
                "$ref": "#/components/schemas/GetDatabaseObjectsMetadataParams"
              }
            },
            "required": ["method"]
          }
        ],
        "description": "Gets detailed metadata about database objects including tables and views."
      },
      "GetDatabaseObjectsByTypeParams": {
        "type": "object",
        "properties": {
          "connectionName": {
            "type": "string",
            "default": "DefaultConnection",
            "description": "The name of the connection string to use."
          },
          "schema": {
            "type": "string",
            "nullable": true,
            "description": "Optional schema filter."
          },
          "objectType": {
            "type": "string",
            "default": "ALL",
            "description": "Object type filter."
          }
        }
      },
      "GetDatabaseObjectsByTypeRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonRpcRequestBase"
          },
          {
            "type": "object",
            "properties": {
              "method": {
                "type": "string",
                "enum": ["GetDatabaseObjectsByType"]
              },
              "params": {
                "$ref": "#/components/schemas/GetDatabaseObjectsByTypeParams"
              }
            },
            "required": ["method"]
          }
        ],
        "description": "Gets detailed metadata about specific database object types."
      },
      "GetSqlServerAgentJobsParams": {
        "type": "object",
        "properties": {
          "connectionName": {
            "type": "string",
            "default": "DefaultConnection",
            "description": "The name of the connection string to use."
          }
        }
      },
      "GetSqlServerAgentJobsRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonRpcRequestBase"
          },
          {
            "type": "object",
            "properties": {
              "method": {
                "type": "string",
                "enum": ["GetSqlServerAgentJobs"]
              },
              "params": {
                "$ref": "#/components/schemas/GetSqlServerAgentJobsParams"
              }
            },
            "required": ["method"]
          }
        ],
        "description": "Gets SQL Server Agent job metadata (jobs, status, owner, etc.) from msdb."
      },
      "GetSqlServerAgentJobDetailsParams": {
        "type": "object",
        "properties": {
          "jobName": {
            "type": "string",
            "description": "The name of the SQL Server Agent job."
          },
          "connectionName": {
            "type": "string",
            "default": "DefaultConnection",
            "description": "The name of the connection string to use."
          }
        },
        "required": ["jobName"]
      },
      "GetSqlServerAgentJobDetailsRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonRpcRequestBase"
          },
          {
            "type": "object",
            "properties": {
              "method": {
                "type": "string",
                "enum": ["GetSqlServerAgentJobDetails"]
              },
              "params": {
                "$ref": "#/components/schemas/GetSqlServerAgentJobDetailsParams"
              }
            },
            "required": ["method", "params"]
          }
        ],
        "description": "Gets detailed information (steps, schedules, history) for a specific SQL Server Agent job."
      },
      "GetSsisCatalogInfoParams": {
        "type": "object",
        "properties": {
          "connectionName": {
            "type": "string",
            "default": "DefaultConnection",
            "description": "The name of the connection string to use."
          }
        }
      },
      "GetSsisCatalogInfoRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonRpcRequestBase"
          },
          {
            "type": "object",
            "properties": {
              "method": {
                "type": "string",
                "enum": ["GetSsisCatalogInfo"]
              },
              "params": {
                "$ref": "#/components/schemas/GetSsisCatalogInfoParams"
              }
            },
            "required": ["method"]
          }
        ],
        "description": "Gets SSIS catalog information including Project Deployment and Package Deployment models."
      },
      "GetAzureDevOpsInfoParams": {
        "type": "object",
        "properties": {
          "connectionName": {
            "type": "string",
            "default": "DefaultConnection",
            "description": "The name of the connection string to use."
          }
        }
      },
      "GetAzureDevOpsInfoRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonRpcRequestBase"
          },
          {
            "type": "object",
            "properties": {
              "method": {
                "type": "string",
                "enum": ["GetAzureDevOpsInfo"]
              },
              "params": {
                "$ref": "#/components/schemas/GetAzureDevOpsInfoParams"
              }
            },
            "required": ["method"]
          }
        ],
        "description": "Gets Azure DevOps information including projects, repositories, builds, and work items."
      },
      "ListConnectionsRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonRpcRequestBase"
          },
          {
            "type": "object",
            "properties": {
              "method": {
                "type": "string",
                "enum": ["ListConnections"]
              },
              "params": {
                "type": "object",
                "nullable": true
              }
            },
            "required": ["method"]
          }
        ],
        "description": "List all available database connections."
      },
      "AddConnectionParams": {
        "type": "object",
        "properties": {
          "request": {
            "$ref": "#/components/schemas/AddConnectionRequest"
          }
        },
        "required": ["request"]
      },
      "AddConnectionRequestSchema": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonRpcRequestBase"
          },
          {
            "type": "object",
            "properties": {
              "method": {
                "type": "string",
                "enum": ["AddConnection"]
              },
              "params": {
                "$ref": "#/components/schemas/AddConnectionParams"
              }
            },
            "required": ["method", "params"]
          }
        ],
        "description": "Add a new database connection."
      },
      "UpdateConnectionParams": {
        "type": "object",
        "properties": {
          "request": {
            "$ref": "#/components/schemas/UpdateConnectionRequest"
          }
        },
        "required": ["request"]
      },
      "UpdateConnectionRequestSchema": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonRpcRequestBase"
          },
          {
            "type": "object",
            "properties": {
              "method": {
                "type": "string",
                "enum": ["UpdateConnection"]
              },
              "params": {
                "$ref": "#/components/schemas/UpdateConnectionParams"
              }
            },
            "required": ["method", "params"]
          }
        ],
        "description": "Update an existing database connection."
      },
      "RemoveConnectionParams": {
        "type": "object",
        "properties": {
          "request": {
            "$ref": "#/components/schemas/RemoveConnectionRequest"
          }
        },
        "required": ["request"]
      },
      "RemoveConnectionRequestSchema": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonRpcRequestBase"
          },
          {
            "type": "object",
            "properties": {
              "method": {
                "type": "string",
                "enum": ["RemoveConnection"]
              },
              "params": {
                "$ref": "#/components/schemas/RemoveConnectionParams"
              }
            },
            "required": ["method", "params"]
          }
        ],
        "description": "Remove a database connection."
      },
      "TestConnectionParams": {
        "type": "object",
        "properties": {
          "request": {
            "$ref": "#/components/schemas/TestConnectionRequest"
          }
        },
        "required": ["request"]
      },
      "TestConnectionRequestSchema": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonRpcRequestBase"
          },
          {
            "type": "object",
            "properties": {
              "method": {
                "type": "string",
                "enum": ["TestConnection"]
              },
              "params": {
                "$ref": "#/components/schemas/TestConnectionParams"
              }
            },
            "required": ["method", "params"]
          }
        ],
        "description": "Test a database connection."
      },
      "RotateKeyParams": {
        "type": "object",
        "properties": {
          "newKey": {
            "type": "string",
            "description": "The new encryption key to use."
          }
        },
        "required": ["newKey"]
      },
      "RotateKeyRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonRpcRequestBase"
          },
          {
            "type": "object",
            "properties": {
              "method": {
                "type": "string",
                "enum": ["RotateKey"]
              },
              "params": {
                "$ref": "#/components/schemas/RotateKeyParams"
              }
            },
            "required": ["method", "params"]
          }
        ],
        "description": "Rotate encryption key for connection strings."
      },
      "GenerateSecureKeyParams": {
        "type": "object",
        "properties": {
          "length": {
            "type": "integer",
            "default": 32,
            "description": "The length of the key to generate."
          }
        }
      },
      "GenerateSecureKeyRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonRpcRequestBase"
          },
          {
            "type": "object",
            "properties": {
              "method": {
                "type": "string",
                "enum": ["GenerateSecureKey"]
              },
              "params": {
                "$ref": "#/components/schemas/GenerateSecureKeyParams"
              }
            },
            "required": ["method"]
          }
        ],
        "description": "Generate a secure random key for connection string encryption."
      },
      "MigrateConnectionsToEncryptedRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonRpcRequestBase"
          },
          {
            "type": "object",
            "properties": {
              "method": {
                "type": "string",
                "enum": ["MigrateConnectionsToEncrypted"]
              },
              "params": {
                "type": "object",
                "nullable": true
              }
            },
            "required": ["method"]
          }
        ],
        "description": "Migrate unencrypted connection strings to encrypted format."
      }
    }
  },
  "security": [
    {
      "BearerAuth": []
    }
  ],
  "paths": {
    "/": {
      "post": {
        "summary": "MCP JSON-RPC Endpoint",
        "description": "This single endpoint handles all MCP tool invocations.\nThe specific tool and its parameters are defined in the JSON-RPC request body.\nRefer to the `requestBody` schema's `oneOf` section for details on each available method.\n",
        "operationId": "jsonRpcCall",
        "requestBody": {
          "description": "JSON-RPC 2.0 Request object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/InitializeRequest"
                  },
                  {
                    "$ref": "#/components/schemas/ExecuteQueryRequest"
                  },
                  {
                    "$ref": "#/components/schemas/GetTableMetadataRequest"
                  },
                  {
                    "$ref": "#/components/schemas/GetDatabaseObjectsMetadataRequest"
                  },
                  {
                    "$ref": "#/components/schemas/GetDatabaseObjectsByTypeRequest"
                  },
                  {
                    "$ref": "#/components/schemas/GetSqlServerAgentJobsRequest"
                  },
                  {
                    "$ref": "#/components/schemas/GetSqlServerAgentJobDetailsRequest"
                  },
                  {
                    "$ref": "#/components/schemas/GetSsisCatalogInfoRequest"
                  },
                  {
                    "$ref": "#/components/schemas/GetAzureDevOpsInfoRequest"
                  },
                  {
                    "$ref": "#/components/schemas/ListConnectionsRequest"
                  },
                  {
                    "$ref": "#/components/schemas/AddConnectionRequestSchema"
                  },
                  {
                    "$ref": "#/components/schemas/UpdateConnectionRequestSchema"
                  },
                  {
                    "$ref": "#/components/schemas/RemoveConnectionRequestSchema"
                  },
                  {
                    "$ref": "#/components/schemas/TestConnectionRequestSchema"
                  },
                  {
                    "$ref": "#/components/schemas/RotateKeyRequest"
                  },
                  {
                    "$ref": "#/components/schemas/GenerateSecureKeyRequest"
                  },
                  {
                    "$ref": "#/components/schemas/MigrateConnectionsToEncryptedRequest"
                  }
                ]
              }
            }
          }
        },        "responses": {
          "200": {
            "description": "JSON-RPC Response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/JsonRpcSuccessResponse"
                    },
                    {
                      "$ref": "#/components/schemas/JsonRpcErrorResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Bearer token missing or malformed in Authorization header."
          },
          "403": {
            "description": "Forbidden. Bearer token is invalid."
          },
          "406": {
            "description": "Not Acceptable. Content negotiation failed."
          },
          "415": {
            "description": "Unsupported Media Type. Request content type must be application/json."
          }
        }
      }
    }
  }
}
